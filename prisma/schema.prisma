// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid()) @db.Uuid
  name        String
  email       String        @unique
  password    String
  transaction Transaction[]
  area        Area[]
  Crop        Crop[]

  @@map("users")
}

model Transaction {
  id          String          @id @default(uuid()) @db.Uuid
  userId      String          @map("user_id") @db.Uuid
  name        String
  description String
  value       Float
  date        DateTime
  type        TransactionType

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE

  @@map("transaction_type")
}

model Area {
  id          String  @id @default(uuid()) @db.Uuid
  userId      String  @map("user_id") @db.Uuid
  name        String
  description String?

  user User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Crop Crop[]

  @@map("areas")
}

model Crop {
  id          String    @id @default(uuid()) @db.Uuid
  areaId      String    @map("area_id") @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?

  area      Area        @relation(fields: [areaId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  CropEvent CropEvent[]

  @@map("crops")
}

model CropEvent {
  id                 String    @id @default(uuid()) @db.Uuid
  cropId             String    @map("crop_id") @db.Uuid
  name               String
  description        String?
  fertilizer         String?
  quantityFertilizer Float?
  workforce          String?
  startDate          DateTime?
  endDate            DateTime?

  crop Crop @relation(fields: [cropId], references: [id], onDelete: Cascade)

  @@map("crop_events")
}
